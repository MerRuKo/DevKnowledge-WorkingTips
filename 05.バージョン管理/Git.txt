● 仕組み
分散型バージョン管理
メインブランチの内容を持つリモートブランチを作成し、それをEclipseに取り込み、ローカルで作業して、
ローカルの作業内容をリモートブランチにプッシュした後、リモートブランチをメインブランチにマージする流れ。


● コマンド
Commit：ローカルに変更内容を保存
Push：ローカルの変更内容をリモートブランチに反映
Pull：リモートブランチの内容をローカルに反映（更新）
Merge/Pull Request：リモートブランチをメインブランチにマージ
Fetch：リモートの変更内容をローカルに取得（確認のみ行い、ローカルの作業内容に上書きされない）


●
2020年以降、マスターブランチのデフォルトの名称がmasterから「main」に変更された。
本ドキュメントでは「main」を基準とするが、古いプロジェクトの場合はmasterに変更すること。


●　Gitを久しぶりに使用する、または初回セットアップ時は以下の設定が必要
git config --global user.name
git config --global user.email
上記コマンドで値が設定されていなければ、以下を入力して設定を行う
git config --global user.name "MerRuKo"
git config --global user.email "mrkim9427@naver.com"
※ 設定しないとコミット時にエラー発生


●　現状をコミット・プッシュ（開発ツールのGUIでしても良い）
1. git status
2. git add .
3. git commit -m "コミットメッセージ入力"
4. git push origin main


● ファイル削除（ローカル+リモート）
1. git rm sample.txt
2. git commit -m "コミットメッセージ入力"
3. git push origin main


● 新しいリモートリポジトリを生成して、初回コミット・プッシュ時
1. プロジェクトのフォルダーに移動してgit bashを実行
2. $ git init
ローカルリポジトリを生成、初期化、.gitフォルダー生成される
3. $ git status
ローカルリポジトリの状態を確認
4. $ git add .
全てのファイルをコミット対象に登録（ステージング）
5. $ git commit -m "コミットメッセージ入力"
ステージングされたファイルをローカルリポジトリにコミット
6. 生成したリポジトリのアドレスを取得
7. $ git remote add origin リポジトリのアドレス
リモートリポジトリの名前をoriginに設定して、ローカルリポジトと連携
8. $ git remote -v
連携されたリモートリポジトリの情報を確認
9. $ git push origin main
コミットしたファイルをリモートリポジトリ(origin)のmainブランチにプッシュ


●
fetch : 원격 저장소의 변경 사항을 로컬 저장소로 가져오지만, 로컬 작업 트리에 영향을 주지 않습니다.
1. 변경된 내용만 다운로드하여 로컬에서 확인 가능
2. 자동으로 병합하지 않기 때문에, 충돌 없이 변경 사항을 검토 가능
3. 이후에 merge를 사용해 병합을 수동으로 진행

pull : 원격 저장소의 변경 사항을 로컬 저장소로 가져오고, 로컬 작업 트리에 자동으로 병합합니다.
1. git fetch와 git merge를 결합한 명령어
2. 작업 중인 파일과 충돌이 발생할 가능성이 있으므로 신중히 사용


●
commit : 로컬브랜치의 변경을 로컬에 저장해두는 것
push : commit 해둔 로컬브랜치의 변경을 리모트브랜치에 반영하는 것