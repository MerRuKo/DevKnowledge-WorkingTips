● <Button Grid.Column="3" Command="{Binding NavigateCmd}" CommandParameter="MainMenu" />

1. Command="{Binding NavigateCmd}"
버튼 클릭 시 실행될 명령(Command)을 ViewModel의 NavigateCmd 속성과 연결합니다.
NavigateCmd는 ViewModel에 정의된 명령으로, 버튼 클릭 이벤트를 처리합니다.

2. CommandParameter="MainMenu"
명령 실행 시 전달할 추가 데이터를 지정합니다.
여기서는 "MainMenu"라는 문자열이 NavigateCmd로 전달됩니다.


● StackPanel의 기본 방향은 수직(Vertical) 이기 때문에 컨텐츠를 평행하게 표시하고 싶다면,
Orientation="Horizontal" 속성을 부여하면 된다.

WrapPanel
기본 방향: Horizontal

Grid
방향 개념 없음
행/열 직접 정의하고 배치 (RowDefinitions, ColumnDefinitions 사용)


● Margin="Left,Top,Right,Bottom"


● 화면 구성시 상속할 수 있는 기본적인 클래스
Page :  UI가 포함된 뷰, 탭페이지
Window : 새창

InitializeComponent()
XAML 파일에서 정의된 UI 요소들을 초기화합니다.
XAML에서 정의된 버튼, 텍스트박스 등 UI 요소들이 코드와 연결되는 부분입니다.

vm = new Vm(this)
Vm은 이 페이지의 뷰모델로, 이 페이지와 관련된 데이터 및 로직을 처리합니다.
여기서 this는 페이지 자신을 넘겨줘서 뷰모델이 뷰와 상호작용할 수 있도록 합니다.

DataContext = vm
DataContext는 WPF에서 데이터 바인딩을 사용할 때 중요한 역할을 합니다.
vm을 DataContext로 설정함으로써, 이 페이지의 UI 요소들이 Vm 뷰모델의 속성들과 바인딩될 수 있습니다.

Vm 클래스는 UserMaster 페이지의 뷰모델 역할을 하며, 데이터와 UI 간의 연결을 처리합니다.


● RowDefinition・ColumnDefinition

+-------+-------+-------+
|       |       |       |
+-------+-------+-------+
|                       |
+-----------------------+

    <!-- 全体構成の定義 (方向：Horizontal)  -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

⇒　전체 화면에서 가로(Row) 2줄을 정의

        <!-- ヘッダー領域の定義 (方向：Vertical) -->
        <Grid Grid.Row="0" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="4*" />
                <ColumnDefinition Width="5*" />
            </Grid.ColumnDefinitions>

⇒　여기가 위에서 <RowDefinition Height="Auto"/> 로 정의한 부분에 해당.
이 부분에서 세로(Column) 3줄을 정의

※ 숫자 뒤에 * 붙이면 비율로 계산하겠다는 뜻. *만 쓰면 1*과 같다.
즉 2:4:5의 비율로 3개의 컬럼에 나눠서 할당하겠다는 의미.
장점은 창 크기가 변해도 유동적으로 크기가 조정된다는 점.


● <Button Grid.Column="3" Command="{Binding NavigateCmd}" CommandParameter="MainMenu" />

1. Command="{Binding NavigateCmd}"
버튼 클릭 시 실행될 명령(Command)을 ViewModel의 NavigateCmd 속성과 연결합니다.
NavigateCmd는 ViewModel에 정의된 명령으로, 버튼 클릭 이벤트를 처리합니다.

2. CommandParameter="MainMenu"
명령 실행 시 전달할 추가 데이터를 지정합니다.
여기서는 "MainMenu"라는 문자열이 NavigateCmd로 전달됩니다.


● ObservableCollection<T> , OnPropertyChanged
컬렉션 안의 요소 추가/삭제 같은 변화를 자동 반영해줘요.
하지만 컬렉션 자체가 통째로 바뀌면, ObservableCollection만으로는 UI가 갱신되지 않아요.
그래서 FilteredByDateSchedules = new ObservableCollection<ScheduleManu>(...) 같은 대입을 했을 때는,
"속성이 바뀌었다"는 알림을 UI에 주어야 해요.
그걸 해주는 게 바로 OnPropertyChanged(nameof(FilteredByDateSchedules)) 호출이에요.
그런데 이 알림을 호출하려면 반드시 속성(set) 안에서 처리해야 해요.
그래서 속성 안에서 백필드(_filteredByDateSchedules) 를 쓰는 구조가 되는 거죠.

            public ObservableCollection<ScheduleManu> FilteredByDateSchedules
            {
                get
                {
                    return _filteredByDateSchedules;
                }

                set
                {
                    _filteredByDateSchedules = value;
                    OnPropertyChanged(nameof(FilteredByDateSchedules));
                }
            }

어쨌든 OnPropertyChanged 만 불리면 되는거니까,
밑에처럼 해도 되는거 아냐?

            public ObservableCollection<ScheduleManu> FilteredByDateSchedules
            {
                get
                {
                    return FilteredByDateSchedules;
                }

                set
                {
                    FilteredByDateSchedules = value;
                    OnPropertyChanged(nameof(FilteredByDateSchedules));
                }
            }

싶지만, 이렇게 하면 무한루프에 빠진다.

get { return FilteredByDateSchedules; }
→ 자신을 호출 → 다시 get 호출 → 다시 자신을 호출 → 계속 반복...
→ 무한 루프 → StackOverflowException 발생

set { FilteredByDateSchedules = value; ... }
→ FilteredByDateSchedules = value
→ 다시 set 호출됨 → 또 FilteredByDateSchedules = value → 무한 루프
→ 역시 StackOverflowException

※ 일반적인 { get; set; } 도 컴파일러가 자동으로 백필드를 만들어주기 때문에 무한루프에 안빠지는 것.


●
Show()는 비모달 창으로 열립니다. 사용자가 여러 창을 동시에 사용할 수 있습니다.
ShowDialog()는 모달 창으로 열려서, 이 창이 닫히기 전까지는 다른 창과 상호작용할 수 없습니다.


● 라벨 정의
<TextBlock Text="表示バッチ" FontWeight="Bold" Margin="0,0,0,5"/>


● 버튼 정의
               <Button x:Name="btnBatchStart"
                        Content="バッチ開始"
                        Width="130"
                        Height="40"
                        Margin="0,0,5,0"
                        Click="btnBatchStart_Click" />


● 체크박스 정의
                    <CheckBox x:Name="chkFLine"
                              Content="Fライン"
                              VerticalAlignment="Center"
                              VerticalContentAlignment="Center"
                              IsChecked="False"
                              Checked="chkFLine_Checked"
                              Unchecked="chkFLine_Unchecked"
                              Margin="5,0"/>


● 라디오오박스 정의
                    <RadioButton x:Name="chkFLine"
                                 Content="F"
                                 VerticalAlignment="Center"
                                 VerticalContentAlignment="Center"
                                 IsChecked="False"
                                 Checked="chkFLine_Checked"
                                 Unchecked="chkFLine_Unchecked"
                                 Margin="5,0"/>


● 데이트픽커 정의
                    <DatePicker x:Name="dpDate"
                                Width="150"
                                FontSize="16"
                                SelectedDate="{x:Static sys:DateTime.Now}"
                                SelectedDateFormat="Short"
                                DisplayDateStart="2025-04-01"
                                DisplayDateEnd="2099-12-31"
                                VerticalContentAlignment="Center"
                                HorizontalContentAlignment="Center"
                                Margin="0,0,50,0" />


● 콤보박스 정의
                <ComboBox Width="500" HorizontalAlignment="Left" HorizontalContentAlignment="Center">
                    <ComboBoxItem Content="全て" IsSelected="True"/>
                    <ComboBoxItem Content="野菜"/>
                    <ComboBoxItem Content="炊上"/>
                </ComboBox>