1.
コントローラー：リクエストを見て、どのサービスを呼び出すかを判断
・入力チェック(物理チェック)
・権限チェック(論理チェック)
・サービスの呼び出し

サービス：どのマッパー、ロジッククラスを呼び出すかを判断
・実質的な処理
・実質的な処理を行うロジッククラスの呼び出し
・マッパーの呼び出し


2.staticを付ける基準
変数 : 共通属性の場合
メソッド : インスタンス変数/インスタンスメソッドを使わないメソッド。
staticメソッドはインスタンスメソッドを呼び出せない。


3.
Q. staticメソッドはstaticメソッドを呼び出せるか？
A. はい。
Q. staticメソッドはインスタンス変数を使用可能か？
A. いいえ。
Q. staticメソッドはインスタンスメソッドを呼び出せるか？
A. いいえ。
Q. なぜstaticメソッドはインスタンスメンバーを使えないのか？
A. オブジェクトが存在するかどうか分からないから。


4.カプセル化の基本 (望ましいコーディング方法)
・変数 : privateで定義。
・メソッド : publicで定義。
・値の操作は必ずメソッドを通じて行うようにする。（get,set）


5.instanceof 演算子
型変換可能かを確認する演算子。
可能ならtrueを返す。


6.複数のオブジェクトを配列で管理
------------------------------------
// 親クラス　　　子クラス
Product p1 = new TV();
Product p2 = new Computer();
Product p3 = new Audio();
------------------------------------
　　　　　　　↓
------------------------------------
Product p[] = new Product[3];
p[0] = new TV();
p[1] = new Computer();
p[2] = new Audio();
------------------------------------


7.拡張for文
int[] arr = {1, 2, 3, 4};
for (int i : arr) {
  System.out.println(i);
}
// 一言で、arrの奴らを無くなるまでiに入れる。


8.
全ての例外の最上位クラス : Exception
なので、例外の種類が予想できない場合はExceptionを使ったらよい。
try {
  // 実行するコード
} catch (Exception e) {
  e.printStackTrace(); // どんな例外もキャッチできる
}


9.
メソッド内名に「throws」をつけたら、呼び出したメソッド側で「try-catch」が強制される。
throw : 特定の例外を意図的に発生させるときに使用
throws : 自分を呼び出した上位メソッドにエラーを投げる


10.Collectionの主要インターフェース
・List : 順序あり、重複あり
・Set : 順序なし、重複なし
・Map : 順序あり、キーは重複なし、値は重複あり


11.Listはインターフェースで、主な実装クラスは以下の通り
・List<Dto> list1 = new ArrayList<Dto>();
・List<Dto> list2 = new LinkedList<Dto>();
・List<Dto> list3 = new Vector<Dto>();
・List<Dto> list4 = new List<Dto>(); // エラー


12.ArrayListの追加はaddだ
InfoDTO infoDTO1 = new InfoDTO();
List<InfoDTO> dtoList = new ArrayList<>;
dtoList.set(0,infoDTO1) // Error
dtoList.add(infoDTO1)   // OK


13.
Junitで意図的に例外を発生させる方法
result = new IOException(anyString)


14.
定数を前に置いて比較することで、nullによるエラーを防ぐ。

eventInfo.getSeason().equals(MEM_JOIN_EVENT_SEASON_CD_HON)
// NullPointerExceptionの可能性あり
⇒
MEM_JOIN_EVENT_SEASON_CD_HON.equals(eventInfo.getSeason())
// 安全な方法


15.三項演算子 (if-elseの変わり)
int endIdx = startIdx + NUMBER_1000 < lastIdx ? // 条件式 ? 
             startIdx + NUMBER_1000 : lastIdx;  // true時 : false時


16.
Integerオブジェクトは、-128～127の範囲で作られた場合、キャッシュされる。
この場合、同じ値でも参照先が違うので、if分岐がうまく作動しないケースがあるので注意。

Integer a = Integer.valueOf(49);    // キャッシュされたインスタンス
Integer b = new Integer(49);        // 新しいインスタンス
System.out.println(a == b);         // falseとなる


17.コレクション（Collection）インターフェースの実体
Iterator：コレクション内のデータにアクセスするため使う。
ListIterator：両方向の移動ができるIterator（使うこと無い）
Enumeration：旧バージョンのIterator（使うこと無い）

Iteratorの代表的なメソッド
boolean hasNext()：次に読み込めるデータがあればtrue。
Object next()：次のデータを読み込む。
void remove()：next()で読み込んだデータを削除。next()の後続でのみ使える。

ArrayList list = new ArrayList();
list.add("1");
list.add("2");
// ListやSetもCollectionインターフェースの実体なので、iterator()メソッドを持っている。
// Listインスタンスをiterator()し、Iteratorオブジェクト化して格納。
Iterator it = list.iterator();
// Iteratorオブジェクトのメソッドを使えるようになる。
While(it.hasNext()){
  ~
}

18.
// 1. `wishAreaTextList` リストを宣言し、初期化する。
List<String> wishAreaTextList = memWorkRegionListDisp.stream()
    // 2. フィルタリング: `mvSrTCrpHqRegionList` にある `hqAddrRegionCd` と
    //    `memWorkRegionListDisp` にある `workAddrRegionCd` が一致する要素のみを残す。
    .filter(getMemWorkRegionDto -> mvSrTCrpHqRegionList.stream()
        .anyMatch(mvSrTCrpHqRegion -> 
            mvSrTCrpHqRegion.getHqAddrRegionCd()
            .equals(getMemWorkRegionDto.getWorkAddrRegionCd())))
    // 3. フィルタリングされた要素から `workAddrRegionText` の値を取得し、新しいリストに変換する。
    .map(GetMemWorkRegionDto::getWorkAddrRegionText)
    .collect(Collectors.toList());

memWorkRegionListDisp リストを stream() を使って処理
→ このリストの各要素（GetMemWorkRegionDto）を1つずつ取り出し、次の処理を行う。

filter() を使用した条件フィルタリング
→ mvSrTCrpHqRegionList の hqAddrRegionCd と
→ memWorkRegionListDisp の workAddrRegionCd を比較し、
→ 一致する場合のみ残す。

map() を使って workAddrRegionText の値を取得
→ フィルタリングされた要素の workAddrRegionText の値を取得し、新しいリストに変換。

結果を wishAreaTextList に保存
→ 最終的に wishAreaTextList にはフィルタリングされた要素の workAddrRegionText の値が格納される。