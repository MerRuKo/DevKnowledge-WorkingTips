●
コントローラー：リクエストを見て、どのサービスを呼び出すかを判断
・入力チェック(物理チェック)
・権限チェック(論理チェック)
・サービスの呼び出し

サービス：どのマッパー、ロジッククラスを呼び出すかを判断
・実質的な処理
・実質的な処理を行うロジッククラスの呼び出し
・マッパーの呼び出し


● staticを付ける基準
変数 : 共通属性の場合
メソッド : インスタンス変数/インスタンスメソッドを使わないメソッド。
staticメソッドはインスタンスメソッドを呼び出せない。


●
Q. staticメソッドはstaticメソッドを呼び出せるか？
A. はい。
Q. staticメソッドはインスタンス変数を使用可能か？
A. いいえ。
Q. staticメソッドはインスタンスメソッドを呼び出せるか？
A. いいえ。
Q. なぜstaticメソッドはインスタンスメンバーを使えないのか？
A. オブジェクトが存在するかどうか分からないから。


● カプセル化の基本 (望ましいコーディング方法)
・変数 : privateで定義。
・メソッド : publicで定義。
・値の操作は必ずメソッドを通じて行うようにする。（get,set）


● instanceof 演算子
型変換可能かを確認する演算子。
可能ならtrueを返す。


● 複数のオブジェクトを配列で管理
------------------------------------
// 親クラス　　　子クラス
Product p1 = new TV();
Product p2 = new Computer();
Product p3 = new Audio();
------------------------------------
　　　　　　　↓
------------------------------------
Product p[] = new Product[3];
p[0] = new TV();
p[1] = new Computer();
p[2] = new Audio();
------------------------------------


● 拡張for文
int[] arr = {1, 2, 3, 4};
for (int i : arr) {
  System.out.println(i);
}
// 一言で、arrの奴らを無くなるまでiに入れる。


●
全ての例外の最上位クラス : Exception
なので、例外の種類が予想できない場合はExceptionを使ったらよい。
try {
  // 実行するコード
} catch (Exception e) {
  e.printStackTrace(); // どんな例外もキャッチできる
}


●
メソッド内名に「throws」をつけたら、呼び出したメソッド側で「try-catch」が強制される。
throw : 特定の例外を意図的に発生させるときに使用
throws : 自分を呼び出した上位メソッドにエラーを投げる


● Collectionの主要インターフェース
・List : 順序あり、重複あり
・Set : 順序なし、重複なし
・Map : 順序あり、キーは重複なし、値は重複あり


● Listはインターフェースで、主な実装クラスは以下の通り
・List<Dto> list1 = new ArrayList<Dto>();
・List<Dto> list2 = new LinkedList<Dto>();
・List<Dto> list3 = new Vector<Dto>();
・List<Dto> list4 = new List<Dto>(); // エラー


● ArrayListの追加はaddだ
InfoDTO infoDTO1 = new InfoDTO();
List<InfoDTO> dtoList = new ArrayList<>;
dtoList.set(0,infoDTO1) // Error
dtoList.add(infoDTO1)   // OK


●
Junitで意図的に例外を発生させる方法
result = new IOException(anyString)


●
定数を前に置いて比較することで、nullによるエラーを防ぐ。

eventInfo.getSeason().equals(MEM_JOIN_EVENT_SEASON_CD_HON)
// NullPointerExceptionの可能性あり
⇒
MEM_JOIN_EVENT_SEASON_CD_HON.equals(eventInfo.getSeason())
// 安全な方法


● 三項演算子 (if-elseの変わり)
int endIdx = startIdx + NUMBER_1000 < lastIdx ? // 条件式 ? 
             startIdx + NUMBER_1000 : lastIdx;  // true時 : false時


●
Integerオブジェクトは、-128～127の範囲で作られた場合、キャッシュされる。
この場合、同じ値でも参照先が違うので、if分岐がうまく作動しないケースがあるので注意。

Integer a = Integer.valueOf(49);    // キャッシュされたインスタンス
Integer b = new Integer(49);        // 新しいインスタンス
System.out.println(a == b);         // falseとなる


● コレクション（Collection）インターフェースの実体
Iterator：コレクション内のデータにアクセスするため使う。
ListIterator：両方向の移動ができるIterator（使うこと無い）
Enumeration：旧バージョンのIterator（使うこと無い）

Iteratorの代表的なメソッド
boolean hasNext()：次に読み込めるデータがあればtrue。
Object next()：次のデータを読み込む。
void remove()：next()で読み込んだデータを削除。next()の後続でのみ使える。

ArrayList list = new ArrayList();
list.add("1");
list.add("2");
// ListやSetもCollectionインターフェースの実体なので、iterator()メソッドを持っている。
// Listインスタンスをiterator()し、Iteratorオブジェクト化して格納。
Iterator it = list.iterator();
// Iteratorオブジェクトのメソッドを使えるようになる。
While(it.hasNext()){
  ~
}


●
// 1. `wishAreaTextList` リストを宣言し、初期化する。
List<String> wishAreaTextList = memWorkRegionListDisp.stream()
    // 2. フィルタリング: `mvSrTCrpHqRegionList` にある `hqAddrRegionCd` と
    //    `memWorkRegionListDisp` にある `workAddrRegionCd` が一致する要素のみを残す。
    .filter(getMemWorkRegionDto -> mvSrTCrpHqRegionList.stream()
        .anyMatch(mvSrTCrpHqRegion -> 
            mvSrTCrpHqRegion.getHqAddrRegionCd()
            .equals(getMemWorkRegionDto.getWorkAddrRegionCd())))
    // 3. フィルタリングされた要素から `workAddrRegionText` の値を取得し、新しいリストに変換する。
    .map(GetMemWorkRegionDto::getWorkAddrRegionText)
    .collect(Collectors.toList());

memWorkRegionListDisp リストを stream() を使って処理
→ このリストの各要素（GetMemWorkRegionDto）を1つずつ取り出し、次の処理を行う。

filter() を使用した条件フィルタリング
→ mvSrTCrpHqRegionList の hqAddrRegionCd と
→ memWorkRegionListDisp の workAddrRegionCd を比較し、
→ 一致する場合のみ残す。

map() を使って workAddrRegionText の値を取得
→ フィルタリングされた要素の workAddrRegionText の値を取得し、新しいリストに変換。

結果を wishAreaTextList に保存
→ 最終的に wishAreaTextList にはフィルタリングされた要素の workAddrRegionText の値が格納される。


● Stream
C#의 LINQ 같은 기능을 하는 Java 8에서 도입된 녀석.

public class Main {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Charlie", "David");

        // 필터링: 이름이 'A'로 시작하는 항목만 선택
        List<String> filteredNames = names.stream()
                .filter(name -> name.startsWith("A"))
                .collect(Collectors.toList());

        System.out.println(filteredNames); // 출력: [Alice]
    }
}


● 제네릭 (generic)
<> 이거. 컴파일시 타입을 체크해주는 기능으로 형변환의 번거로움이 줄어들고,
런타임(프로그램 실행 후) 오류보다는 컴파일 에러가 낫기 때문에 그걸 유도하기 위함.

ArrayList list = new ArrayList();
list.add(10);
list.add("30") // 컴파일 에러

ArrayList list = new ArrayList();
list.add(10);
list.add("30") // 컴파일 에러 안남

ArrayList tvList = new ArrayList();
tvList.add(new Tv());
Tv t = (Tv)tvList.get(0); // 지네릭 없어서 Object 타입으로 get 되므로 형변환 필요.

ArrayList<Tv> tvList = new ArrayList<Tv>();
tvList.add(new Tv());
Tv t = tvList.get(0); // 형변환 불필요.


● 제네릭 클래스
<> 있으면 제네릭 클래스고 없으면 일반 클래스.
일반클래스는 <Object> 가 생략되어 있는 것.


● 타입변수
1. 제네릭을 표시하는 <> 안에 들어가는 문자.
뭘 써도 상관없지만 주로 밑에 예를 따른다.
<T>: Type, 일반적인 데이터 타입
<E>: Element, 컬렉션의 요소
<K, V>: Key, Value, 맵 구조
<R>: Return Type, 메서드 반환 타입

2. 실제 ArrayList 의 라이브러리 클래스를 보면,
public class ArrayList<E> extends AbstractList<E> implements ~
<Object>로 쓰면, 혹은 제네릭을 생략하면 이 타입 저 타입의 객체가 다 리스트에 쌓여버리지만
<E>로 쓰면 한 타입의 객체만 고정돼서 리스트에 쌓일 수 있도록 유도 할 수 있다.

3. ArrayList<Tv> tvList = new ArrayList<Tv>();
참조변수에 대입된 타입과 생성자에 대입된 타입은 반드시 같아야한다.
즉 앞에 <>와 뒤의 <>는 반드시 똑같아야한다.

4.
public static <E> boolean contains(List<E> list, E item) {
    return list.contains(item);
}

<E> : 이 메서드는 호출 시점에 전달받는 타입에 따라 E가 특정 타입으로 대체됩니다.
만약 List<String>을 전달하면, E는 String으로 대체됩니다.

List<E> list : 제네릭 타입의 리스트를 매개변수로 받습니다. 리스트의 요소 타입은 E로 제한됩니다.

E item : 리스트에서 찾고자 하는 요소를 나타냅니다. 이 요소의 타입 역시 리스트의 요소 타입(E)과 동일해야 합니다.

return list.contains(item) : 리스트에 특정 객체가 포함되어 있는지를 확인하고, 결과를 boolean 값으로 반환합니다.

결과 :
List<String> stringList = Arrays.asList("apple", "banana", "cherry");
boolean result = contains(stringList, "banana"); // E는 String으로 대체됨
System.out.println(result); // true