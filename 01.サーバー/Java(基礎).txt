1.
public classは1つのJavaファイルに1つしか存在できず、ファイル名と一致している必要がある。


2.
オブジェクト(객체,오브젝트) : オブジェクトそのものを指す一般的な用語
インスタンス(인스턴스) : 特定のクラスから生成されたオブジェクト


3.
Tv t;            // Tvクラス型の参照変数、tの宣言
t = new TV();    // Tvクラスのインスタンスを生成し、そのアドレスをtに保存
⇒
Tv t = new TV(); // つまり、ここでtはリモコンみたいな役割


4.
配列を宣言しただけでは、オブジェクトが3つ生成されるわけではない。
生成されるのは参照変数だけ。

Tv[] tvArr = new Tv[3]; // オブジェクト配列
tvArr [0] = new Tv();
tvArr [1] = new Tv();
tvArr [2] = new Tv();   // このように、個別にインスタンスを生成して入れる必要がある。


5.
class Variables
{
   int iv;           // インスタンス変数(オブジェクト生成後に使用可能)
   static int cv;    // クラス変数(いつでも使用可能)

    void method () {
        int Iv = 0;  // メソッド変数(メソッド内でのみ使用可能)
     }
}

・インスタンス変数
主に個別属性に活用。
使用時には インスタンス名.変数名（例：c.color）と指定。
・クラス変数（静的変数）
主に共通属性に活用。
使用時には クラス名.変数名（例：Card.height）と指定。
いつでもと言うより、正確にはクラスがメモリにロードされた時点から使用可能。
・メソッド変数
メソッド外の他の変数と重複する名でも関係ない。


6.
インスタンスメソッド
・インスタンス生成後、「インスタンス名.メソッド名」で呼び出す。
・インスタンス変数やインスタンスメソッドに関連した作業を行うメソッド。
・メソッド内でインスタンス変数の使用が可能。

staticメソッド(クラスメソッド、静的メソッド)
・インスタンスを生成せず、「クラス名.メソッド名」で呼び出す。
・インスタンス変数やインスタンスメソッドに関連しない作業を行うメソッド。
・メソッド内でインスタンス変数の使用は不可能。


7.
基本データ型 : int, char, float, boolean
複合データ型 : array, list, class, string


8.return
戻り値は0個か1個だけ可能なので、2個以上は配列やオブジェクトに処理する。
メソッド実行中にreturnに会ったら、メソッド実行を中断して呼び出し元に戻る。
リターンタイプがvoidでなければ、必ずreturnの定義が必要。


9.
メンバー変数(멤버변수,필드변수)：クラス領域で宣言
ローカル変数(로컬변수,지역변수)：メソッド内で宣言
グローバル変数(글로별변수,클래스변수,전역변수)：staticで宣言


10.継承（상속）
・子クラスは親クラスの全てのメンバー（変数、メソッド）を利用可能。
・祖先がないクラスは自動的にObjectクラスを継承する。
・Objectクラス : toString(), equals(), hashCode()などを持つ。


11.コンストラクタ(생성자)
・メンバ変数の初期化に主に使われる。
・メソッド名はクラス名と必ず一致する必要がある。
・戻り値はなく、voidも付けない。
・複数を持つことが可能。


12.
デフォルトコンストラクタ Card() {}
コンパイラが自動で作成する。

引数付きコンストラクタ Card(int a, int b) {}
明示的に定義する必要がある。


13.別のコンストラクタを呼び出す時には `this()` を使用する。
class Car2 {
  String color;
  String gearType;
  int door;

  Car2() {
    this("white", "auto", 4);
  }

  Car2(String color) {
    this (color, "auto", 4);
  }

  Car2(String color, String gearType, int door) {
    this.color = color;
    this.gearType = gearType;
    this.door = door;
  }
}


14.参照変数 this
・インスタンス自身を指す参照変数。
・this参照変数とthis()コンストラクタは完全に別物。

class MyMath2 {
  long a, b // this.a, this.b ← 本当の名前
}


15.
private SonySpeaker speaker;　// 変数宣言
speaker = new SonySpeaker();　// インスタンス生成+初期化
⇒
SonySpeaker speaker = new SonySpeaker();　// 変数宣言+インスタンス生成+初期化


16.初期化
・自動初期化 : 宣言すると、intは0、オブジェクトはnullなど。
・簡単初期化 : =で指定。
・複雑初期化 : ブロックやコンストラクタで指定。

クラス変数の初期化タイミング : クラスが初めてロードされた時、1度だけ。
インスタンス変数の初期化タイミング : インスタンスが生成されるたび。

class InitTest {
  static int cv = 1;   // 明示的初期化
  int iv = 1;          // 明示的初期化

  static { cv = 2; }   // クラス初期化ブロック
  { iv = 2; }          // インスタンス初期化ブロック

  InitTest() {         // コンストラクタ
    iv = 3;
  }
}


17.オーバーローディング (Overloading) が成立する条件
・メソッド名が同じであること。
・引数の数、または、型が異なること。
・戻り値の型は関係ない。


18.
オーバーロード (overloading): 既存にない新しいメソッドを定義すること。 (new)
オーバーライド (overriding): 継承されたメソッドの内容を変更すること。 (modify)

class Parent {
  void parentMethod() {}
}

class Child extends Parent {
  void parentMethod() {}       // オーバーライド  
  void parentMethod(int i) {}  // オーバーロード  
  void childMethod() {}        // メソッド定義  
  void childMethod(int i) {}   // オーバーロード  
}