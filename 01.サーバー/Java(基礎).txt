1.
public classは1つのJavaファイルに1つしか存在できず、ファイル名と一致している必要がある。


2.
オブジェクト(객체,오브젝트) : オブジェクトそのものを指す一般的な用語
インスタンス(인스턴스) : 特定のクラスから生成されたオブジェクト


3.
Tv t;            // Tvクラス型の参照変数、tの宣言
t = new TV();    // Tvクラスのインスタンスを生成し、そのアドレスをtに保存
⇒
Tv t = new TV(); // つまり、ここでtはリモコンみたいな役割


4.
配列を宣言しただけでは、オブジェクトが3つ生成されるわけではない。
生成されるのは参照変数だけ。

Tv[] tvArr = new Tv[3]; // オブジェクト配列
tvArr [0] = new Tv();
tvArr [1] = new Tv();
tvArr [2] = new Tv();   // このように、個別にインスタンスを生成して入れる必要がある。


5.
class Variables
{
   int iv;           // インスタンス変数(オブジェクト生成後に使用可能)
   static int cv;    // クラス変数(いつでも使用可能)

    void method () {
        int Iv = 0;  // メソッド変数(メソッド内でのみ使用可能)
     }
}

・インスタンス変数
主に個別属性に活用。
使用時には インスタンス名.変数名（例：c.color）と指定。
・クラス変数（静的変数）
主に共通属性に活用。
使用時には クラス名.変数名（例：Card.height）と指定。
いつでもと言うより、正確にはクラスがメモリにロードされた時点から使用可能。
・メソッド変数
メソッド外の他の変数と重複する名でも関係ない。


6.
インスタンスメソッド
・インスタンス生成後、「インスタンス名.メソッド名」で呼び出す。
・インスタンス変数やインスタンスメソッドに関連した作業を行うメソッド。
・メソッド内でインスタンス変数の使用が可能。

staticメソッド(クラスメソッド、静的メソッド)
・インスタンスを生成せず、「クラス名.メソッド名」で呼び出す。
・インスタンス変数やインスタンスメソッドに関連しない作業を行うメソッド。
・メソッド内でインスタンス変数の使用は不可能。


7.
基本データ型 : int, char, float, boolean
複合データ型 : array, list, class, string


8.return
戻り値は0個か1個だけ可能なので、2個以上は配列やオブジェクトに処理する。
メソッド実行中にreturnに会ったら、メソッド実行を中断して呼び出し元に戻る。
リターンタイプがvoidでなければ、必ずreturnの定義が必要。


9.
メンバー変数(멤버변수,필드변수)：クラス領域で宣言
ローカル変数(로컬변수,지역변수)：メソッド内で宣言
グローバル変数(글로별변수,클래스변수,전역변수)：staticで宣言


10.継承（상속）
・子クラスは親クラスの全てのメンバー（変数、メソッド）を利用可能。
・祖先がないクラスは自動的にObjectクラスを継承する。
・Objectクラス : toString(), equals(), hashCode()などを持つ。


11.コンストラクタ(생성자)
・メンバ変数の初期化に主に使われる。
・メソッド名はクラス名と必ず一致する必要がある。
・戻り値はなく、voidも付けない。
・複数を持つことが可能。


12.
デフォルトコンストラクタ Card() {}
コンパイラが自動で作成する。

引数付きコンストラクタ Card(int a, int b) {}
明示的に定義する必要がある。


13.別のコンストラクタを呼び出す時には `this()` を使用する。
class Car2 {
  String color;
  String gearType;
  int door;

  Car2() {
    this("white", "auto", 4);
  }

  Car2(String color) {
    this (color, "auto", 4);
  }

  Car2(String color, String gearType, int door) {
    this.color = color;
    this.gearType = gearType;
    this.door = door;
  }
}


14.参照変数 this
・インスタンス自身を指す参照変数。
・this参照変数とthis()コンストラクタは完全に別物。

class MyMath2 {
  long a, b // this.a, this.b ← 本当の名前
}


15.
private SonySpeaker speaker;　// 変数宣言
speaker = new SonySpeaker();　// インスタンス生成+初期化
⇒
SonySpeaker speaker = new SonySpeaker();　// 変数宣言+インスタンス生成+初期化


16.初期化
・自動初期化 : 宣言すると、intは0、オブジェクトはnullなど。
・簡単初期化 : =で指定。
・複雑初期化 : ブロックやコンストラクタで指定。

クラス変数の初期化タイミング : クラスが初めてロードされた時、1度だけ。
インスタンス変数の初期化タイミング : インスタンスが生成されるたび。

class InitTest {
  static int cv = 1;   // 明示的初期化
  int iv = 1;          // 明示的初期化

  static { cv = 2; }   // クラス初期化ブロック
  { iv = 2; }          // インスタンス初期化ブロック

  InitTest() {         // コンストラクタ
    iv = 3;
  }
}


17.オーバーローディング (Overloading) が成立する条件
・メソッド名が同じであること。
・引数の数、または、型が異なること。
・戻り値の型は関係ない。


18.
オーバーロード (overloading): 既存にない新しいメソッドを定義すること。 (new)
オーバーライド (overriding): 継承されたメソッドの内容を変更すること。 (modify)

class Parent {
  void parentMethod() {}
}

class Child extends Parent {
  void parentMethod() {}       // オーバーライド  
  void parentMethod(int i) {}  // オーバーロード  
  void childMethod() {}        // メソッド定義  
  void childMethod(int i) {}   // オーバーロード  
}


19.参照変数 super
親のメンバーと自分のメンバーを区別するために使用。

class Main {
  public static void main(String args[]) {
    Child c = new Child();
  }
}

class Parent { 
  int x = 10;   // super.x   
}

class Child extends Parent {
  int x = 20;   // this.x
}


20.コンストラクタ super()
・親のコンストラクタを呼び出す際に使用。
・すべてのクラスは Object クラスを最高の親として持つ。
・コンパイラが自動で挿入するため省略可能。
・コンストラクタを呼び出すとき、最初の行に super() が省略されている。


21.
・パッケージ : クラスの集合。
例）java.lang.String
・jar : クラスを圧縮したファイル。
例）rt.jar (すべての基本クラスが圧縮されているファイル。Java9以降はない。)


22.
publicクラスでなくても、mainメソッドを


23.
インポート
・他のパッケージのクラスを使用するときに必要。
・同じパッケージ内のクラスはインポート不要。
・java.lang パッケージのクラスはインポート不要 (例: String, Math, int, Exception)

staticインポート
・クラス名を省略可能にする。
例）import static java.lang.Math.random;
　　System.out.println(Math.random( ));
⇒　System.out.println(random());


24.
abstract class AbstractTest {　// 抽象クラス : 抽象メソッドを含むクラス
  abstract void move();　　　　　// 抽象メソッド : 実装部のないメソッド 
}持てる。


25.final
・クラス : 拡張不可。継承の最終クラス。
・メソッド : オーバーライド不可。
・メンバー変数・ローカル変数 : 値の変更不可、定数化される。


26.修飾子 (しゅうしょくし,수식자,접근제어자)
・private : 同一クラス内のみアクセス可能。
・default : 同一パッケージ内のみアクセス可能。
・protected : 同一パッケージ内 + 他のパッケージの子クラスがアクセス可能。
・public : アクセス制限なし。


27.
多態性 (polymorphism)
複数の形態を持つ能力。
親タイプの参照変数で子タイプのオブジェクトを扱う。
// 親：SmartTv　子：SmartTv
TV t = new SmartTv();  // OK
SmartTv s = new TV();  // エラー


28.参照変数の型変換
参照変数が使えるメンバーの数を調整する。親子関係なら型変換可能。

class Car { }
class FireEngine extends Car { }
class Ambulance extends Car { }

FireEngine f = new FireEngine();
Car c = (Car)f;                   // OK: 親タイプへ変換 (省略可能)
FireEngine f2 = (FireEngine)c;    // OK: 子タイプへ変換 (省略不可)
Ambulance a = (Ambulance)f;       // エラー: 他の子クラス間は不可


29.
// 親：Car　子：FireEngine
Car myCar = new FireEngine();
⇒
①新しい FireEngine() オブジェクトがメモリ上に生成。
②メモリアドレス(例: 0x100)を親クラス型参照変数 myCar に保存。
(参照変数 = リモコン, オブジェクト = 実際のテレビ)


30.パラメータの多態性
--------------------------------------------------------------------------------------------
class Product {
　　int price;                             // 製品の価格
　　int bonusPoint;                        // 製品購入時のボーナスポイント

　　Product(int price) {
　　　　this.price = price;
　　　　bonusPoint = (int)(price/10.0);     // ボーナスポイントは製品価格の10％
　　}
}
--------------------------------------------------------------------------------------------
class Tv extends Product {
　　Tv() {
　　　　// 親クラスのコンストラクタを呼出
　　　　super(100);                         // Tvの価格を100に
　　}
　　// ObjectクラスのtoString()をオーバーライド
　　public String toString() { return "Tv"; }
}
--------------------------------------------------------------------------------------------
class Computer extends Product {
　　Computer() { super(200); }
　　public String toString() { return "Computer"; }
}
--------------------------------------------------------------------------------------------
class Buyer { 				                // 顧客、製品を買う人
	int money = 1000; 		              // 所持金
	int bonusPoint = 0; 	　　           // ボーナスポイント

	void buy(Product p) {
		if (money < p.price) {
			System.out.println("残額が不足していますので、製品を買えません。");
			return;
		}
		money -= p.price; 			          // 所持金から製品の価格を引く
		bonusPoint += p.bonusPoint; 　   　// 製品のボーナスポイントを追加する
		System.out.println(p + "を購入しました。");
	}
}
--------------------------------------------------------------------------------------------
class Ex7_8 {
	public static void main(String arg[]) {
        	Buyer b = new Buyer();
        
        	b.buy(new Tv1());
        	b.buy(new Computer()); 
        
        	System.out.println("現在の残額は" + b.money + "です。");
        	System.out.println("現在のボーナスポイントは" + b.bonusPoint + "です。");
}
--------------------------------------------------------------------------------------------